#include <fbjni/fbjni.h>
// Generated by uniffi-bindgen-react-native
#include <jni.h>
#include <jsi/jsi.h>
#include <ReactCommon/CallInvokerHolder.h>
#include "react-native-bench.h"

namespace jsi = facebook::jsi;
namespace react = facebook::react;

// Automated testing checks Java_com_bench_BenchModule and bench
// by comparing the whole line here.
/*
Java_com_bench_BenchModule_nativeMultiply(JNIEnv *env, jclass type, jdouble a, jdouble b) {
    return bench::multiply(a, b);
}
*/

// Installer coming from BenchModule
extern "C"
JNIEXPORT jboolean JNICALL
Java_com_bench_BenchModule_nativeInstallRustCrate(
    JNIEnv *env,
    jclass type,
    jlong rtPtr,
    jobject callInvokerHolderJavaObj
) {
    try {
        if (callInvokerHolderJavaObj == nullptr) {
            return false;
        }

        auto alias = facebook::jni::alias_ref<jobject>(callInvokerHolderJavaObj);
        auto holder = facebook::jni::static_ref_cast<facebook::react::CallInvokerHolder::javaobject>(alias);
        if (!holder) {
            return false;
        }

        auto jsCallInvoker = holder->cthis()->getCallInvoker();
        if (!jsCallInvoker) {
            return false;
        }

        auto runtime = reinterpret_cast<jsi::Runtime *>(rtPtr);
        return {{ ns }}::installRustCrate(*runtime, jsCallInvoker);
    } catch (...) {
        return false;
    }
}

extern "C"
JNIEXPORT jboolean JNICALL
Java_com_bench_BenchModule_nativeCleanupRustCrate(JNIEnv *env, jclass type, jlong rtPtr) {
    auto runtime = reinterpret_cast<jsi::Runtime *>(rtPtr);
    return bench::cleanupRustCrate(*runtime);
}